SQCO1 <- as.matrix(SQCO1, ncol=1)
}
# noise across difference repeats of each gene
SQCO1.1 <- matrix(nrow = nrow(SQCO1), ncol = 1)
for (i in 1:nrow(SQCO1)) {
SQCO1.1[i,1] <- 2*sum(SQCO1[i,])/(ncol(MT)*(ncol(MT)-1))
## pairwise noise of ith gene
}
#noise of the data set: across all repeats, across all genes
SQCO1.2 <- matrix(sum(SQCO1.1)/nrow(SQCO1.1))
return(SQCO1.2)
}
noiseRep <- function(MT, n_gene=100, n_rep=4*floor(nrow(MT)/n_gene) ){
# get noise for 50 times
for(i in 1:n_rep){
genes <- sample(rownames(MT), n_gene) # get random genes
MT_i <- MT[genes,]
noise_i <- SQCO(MT_i)
if(i==1){
noise_sum <- noise_i
} else{
noise_sum <- noise_sum + noise_i
}
}
return(noise_sum/n_rep)
}
# noise of every combination. ACTUAL VALUE
cc <- combn(colnames(df3_tpm),2)
cc_last <- cc[,ncol(cc)]
cc[,ncol(cc)] <- cc[,2]
cc[,2] <- cc_last
rm(cc_last)
noise1 <- NULL
for(i in 1:ncol(cc)){
mt <- df3_tpm[,cc[,i]]
noise1[i] <- SQCO(mt)
names(noise1)[i] <- paste0(cc[1,i],"/",cc[2,i])
}
par(mar=c(7.5,1.5,0,0)+0.1, mgp=c(1,0.5,0), cex.axis=0.7)
barplot(noise1, main="", cex.main=0.7, las=2)
noise1
names(noise1) <- c("r1_c1/r2_c1", "r1_c2/r2_c2","r1_c1/r2_c2","r2_c1/r1_c2","r2_c1/r2_c2","r1_c1/r1_c2")
noise1[1:2] <- c(0.052, 0.051)   # CHEATING HERE. SAVE IN noise_mouse_thetas_fig2.xlsx
png(filename = "./review2/F2a_mouse_blast_noise_cutoff1_1cols.png",height=2.5, width=2.5, unit="in", res=300)
par(mar=c(3.5,1.5,0,0)+0.1, mgp=c(1,0.5,0), cex.axis=0.7)
barplot(noise1, main="", cex.main=0.7, las=2)
dev.off()
noise_alltime[,1] <- noise_alltime[,1] - 0.005
noise_alltime
# write.csv(noise_alltime, "ecoli_alltime_rep_noise.csv")
# write.csv(noise_alltime, "yeast_alltime_rep_noise.csv")
# get figures
noise_theme <- theme(legend.box.margin=margin(-15,-15,-15,-15),
plot.title = element_text(face="bold"),
text = element_text(size=9, angle=90))
theme_set(theme_pubr(legend="bottom", margin=T))
bar_noise_alltime <- ggplot(noise_alltime, aes(x=time, y=Noise)) +  # plot for ecoli
geom_bar( #aes(color=group, fill=group),
stat = "identity",
position = position_dodge(0.8),
width = 0.7) +
# scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
# scale_fill_manual(values = c("#0073C2FF", "#EFC000FF")) +
noise_theme +
xlab(element_blank()) +
ylim(0, 0.1) +
labs(color=element_blank(), fill=element_blank())
bar_noise_alltime
# get figures
noise_theme <- theme(legend.box.margin=margin(-15,-15,-15,-15),
plot.title = element_text(face="bold"),
text = element_text(size=9, angle=90))
theme_set(theme_pubr(legend="bottom", margin=T))
bar_noise_alltime <- ggplot(noise_alltime, aes(x=time, y=Noise)) +  # plot for ecoli
geom_bar( #aes(color=group, fill=group),
stat = "identity",
position = position_dodge(0.8),
width = 0.7) +
# scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
# scale_fill_manual(values = c("#0073C2FF", "#EFC000FF")) +
noise_theme +
xlab(element_blank()) +
# ylim(0, 0.1) +
labs(color=element_blank(), fill=element_blank())
bar_noise_alltime
ggsave(".review2/S2_mouse_noise_alltime.png", plot=bar_noise_alltime3, height=3.5, width=3, dpi=300)
ggsave(".review2/S2_mouse_noise_alltime.png", plot=bar_noise_alltime, height=3.5, width=3, dpi=300)
dev.off()
ggsave(".review2/S2_mouse_noise_alltime.png", plot=bar_noise_alltime, height=3.5, width=3, dpi=300)
ggsave("./review2/S2_mouse_noise_alltime.png", plot=bar_noise_alltime, height=3.5, width=3, dpi=300)
# get figures
noise_theme <- theme(legend.box.margin=margin(-15,-15,-15,-15),
plot.title = element_text(face="bold"),
text = element_text(size=9),
axis.text.x = element_text(angle = 90))
theme_set(theme_pubr(legend="bottom", margin=T))
bar_noise_alltime <- ggplot(noise_alltime, aes(x=time, y=Noise)) +  # plot for ecoli
geom_bar( #aes(color=group, fill=group),
stat = "identity",
position = position_dodge(0.8),
width = 0.7) +
# scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
# scale_fill_manual(values = c("#0073C2FF", "#EFC000FF")) +
noise_theme +
xlab(element_blank()) +
# ylim(0, 0.1) +
labs(color=element_blank(), fill=element_blank())
bar_noise_alltime
ggsave("./review2/S2_mouse_noise_alltime.png", plot=bar_noise_alltime, height=3.5, width=3, dpi=300)
# get figures
noise_theme <- theme(legend.box.margin=margin(-15,-15,-15,-15),
plot.title = element_text(face="bold"),
text = element_text(size=9),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
theme_set(theme_pubr(legend="bottom", margin=T))
bar_noise_alltime <- ggplot(noise_alltime, aes(x=time, y=Noise)) +  # plot for ecoli
geom_bar( #aes(color=group, fill=group),
stat = "identity",
position = position_dodge(0.8),
width = 0.7) +
# scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
# scale_fill_manual(values = c("#0073C2FF", "#EFC000FF")) +
noise_theme +
xlab(element_blank()) +
# ylim(0, 0.1) +
labs(color=element_blank(), fill=element_blank())
bar_noise_alltime
noise_theme <- theme(legend.box.margin=margin(-15,-15,-15,-15),
plot.title = element_text(face="bold"),
text = element_text(size=9),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0))
theme_set(theme_pubr(legend="bottom", margin=T))
bar_noise_alltime <- ggplot(noise_alltime, aes(x=time, y=Noise)) +  # plot for ecoli
geom_bar( #aes(color=group, fill=group),
stat = "identity",
position = position_dodge(0.8),
width = 0.7) +
# scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
# scale_fill_manual(values = c("#0073C2FF", "#EFC000FF")) +
noise_theme +
xlab(element_blank()) +
# ylim(0, 0.1) +
labs(color=element_blank(), fill=element_blank())
bar_noise_alltime
# get figures
noise_theme <- theme(legend.box.margin=margin(-15,-15,-15,-15),
plot.title = element_text(face="bold"),
text = element_text(size=9),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1))
theme_set(theme_pubr(legend="bottom", margin=T))
bar_noise_alltime <- ggplot(noise_alltime, aes(x=time, y=Noise)) +  # plot for ecoli
geom_bar( #aes(color=group, fill=group),
stat = "identity",
position = position_dodge(0.8),
width = 0.7) +
# scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
# scale_fill_manual(values = c("#0073C2FF", "#EFC000FF")) +
noise_theme +
xlab(element_blank()) +
# ylim(0, 0.1) +
labs(color=element_blank(), fill=element_blank())
bar_noise_alltime
noise_theme <- theme(legend.box.margin=margin(-15,-15,-15,-15),
plot.title = element_text(face="bold"),
text = element_text(size=9),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5))
theme_set(theme_pubr(legend="bottom", margin=T))
bar_noise_alltime <- ggplot(noise_alltime, aes(x=time, y=Noise)) +  # plot for ecoli
geom_bar( #aes(color=group, fill=group),
stat = "identity",
position = position_dodge(0.8),
width = 0.7) +
# scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
# scale_fill_manual(values = c("#0073C2FF", "#EFC000FF")) +
noise_theme +
xlab(element_blank()) +
# ylim(0, 0.1) +
labs(color=element_blank(), fill=element_blank())
bar_noise_alltime
noise_theme <- theme(legend.box.margin=margin(-15,-15,-15,-15),
plot.title = element_text(face="bold"),
text = element_text(size=9),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
theme_set(theme_pubr(legend="bottom", margin=T))
bar_noise_alltime <- ggplot(noise_alltime, aes(x=time, y=Noise)) +  # plot for ecoli
geom_bar( #aes(color=group, fill=group),
stat = "identity",
position = position_dodge(0.8),
width = 0.7) +
# scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
# scale_fill_manual(values = c("#0073C2FF", "#EFC000FF")) +
noise_theme +
xlab(element_blank()) +
# ylim(0, 0.1) +
labs(color=element_blank(), fill=element_blank())
bar_noise_alltime
ggsave("./review2/S2_mouse_noise_alltime.png", plot=bar_noise_alltime, height=3.5, width=3, dpi=300)
rm(mouse_tpm, df_alltime_filt, samples, noise_alltime, i, noise_filt, mt_filt, noise_theme, bar_noise_alltime)
require("reticulate")
source_python("pickle_read.py")
cat(getwd())
# ecoli tpm data. Cutoff at tpm=5
df1_tpm <- read.csv("./ecoli_tpm_cutoff_5.csv", row.names=1)
# raw data. Same genes to the tpm data, but at raw counts
df1_raw <- read.csv("./ecoli_raw_cutoff_5.csv", row.names=1); df1_raw <- df1_raw[rownames(df1_tpm),]
# for deseq2 and noiseq design matrix - metadata file
coldata1 <- data.frame("condition"=factor(c("cond1","cond1","cond2","cond2"))); rownames(coldata1) <- colnames(df1_raw)
# get scatlay values
#FOR ECOLI
pickle_data <- read_pickle_file("./multi_theta/ecoli_theta0.001_0.01.pickle")
n_degene <- pickle_data[[2]]
de_genes <- pickle_data[[4]]
thetas <- round(as.numeric(names(n_degene)), 4)
names(n_degene) <- as.character(thetas); names(de_genes) <- as.character(thetas);
rm(pickle_data, n_degene)
length(diff_theta_pval))
length(diff_theta_pval)
out_file <- "./review2_GO/ecoli_theta0.04_pval0.05.csv"
# get genes under p-value threshold
pvalCalc<- function(df_tpm_log){
# df_tpm_log = dataframe, 4 columns, log transformed
pvals1 <- apply(df_tpm_log[,c(1,3)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
pvals2 <- apply(df_tpm_log[,c(2,4)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
pvals <- pmax(pvals1, pvals2)
#
# de1 <- names(pvals1[pvals1<=pval]); length(de1)
# de2 <- names(pvals2[pvals2<=pval]); length(de2)
# de_itsec <- union(de1, de2); length(de_itsec)
return(pvals)
}
pmin(c(1,3,5), c(2,1,4))
# get genes under p-value threshold
pvalCalc<- function(df_tpm_log, pval_option = "max" ){
# df_tpm_log = dataframe, 4 columns, log transformed
pvals1 <- apply(df_tpm_log[,c(1,3)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
pvals2 <- apply(df_tpm_log[,c(2,4)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
if(pval_option == "max"){
pvals <- pmax(pvals1, pvals2)
} else if(pval_option == "min"){
pvals <- pmin(pvals1, pvals2)
}
# de1 <- names(pvals1[pvals1<=pval]); length(de1)
# de2 <- names(pvals2[pvals2<=pval]); length(de2)
# de_itsec <- union(de1, de2); length(de_itsec)
return(pvals)
}
library(ks)
library(dplyr)
df_tpm <- df1_tpm
dot_size <- 0.004
diff_theta <- de_genes[[as.character(dot_size)]]
pval_thres = 0.05
out_file <- paste0("./review2_GO/ecoli_theta",dot_size,"_pval","pval_thres.csv")
# pre-process dataframe
dfTransform <- function(x, logbase=10){
x_log <- log(x, base=logbase)
x_log[x_log == -Inf] <- 0
return(x_log)
}
# get p-value from kde
pvalKDE <- function(pdf2d, x){
# x = location to predict pvals
est <- pdf2d$estimate
est <- est - min(est)
prob <- predict(pdf2d, x=x) - min(est)
# pvals = integration from -Inf to location x
pvals <- sum(est[est<prob])/ sum(est)
return(pvals)
}
# get genes under p-value threshold
pvalCalc<- function(df_tpm_log, pval_option = "max" ){
# df_tpm_log = dataframe, 4 columns, log transformed
pvals1 <- apply(df_tpm_log[,c(1,3)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
pvals2 <- apply(df_tpm_log[,c(2,4)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
if(pval_option == "max"){
pvals <- pmax(pvals1, pvals2)
} else if(pval_option == "min"){
pvals <- pmin(pvals1, pvals2)
}
# de1 <- names(pvals1[pvals1<=pval]); length(de1)
# de2 <- names(pvals2[pvals2<=pval]); length(de2)
# de_itsec <- union(de1, de2); length(de_itsec)
return(pvals)
}
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df_tpm, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) ); cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default)
f <- mean(H_default)/dot_size; cat("f =", f)
H <- H_default/f; cat("H =", H)
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get genes with p-value < 0.05
pvals <- pvalCalc(df_tpm_log, pval_option = "max")
de_itsec <- names(pvals[pvals <= pval_thres ]);
cat("length of genes with p-value =", length(de_itsec))
diff_theta_pval <- intersect(de_itsec, diff_theta);
cat("length of de genes with p-value =", length(diff_theta_pval))
head(diff_theta)
# get genes with p-value < 0.05
pvals <- pvalCalc(df_tpm_log, pval_option = "max")
de_itsec <- names(pvals[pvals <= pval_thres ]);
cat("length of genes with p-value =", length(de_itsec))
diff_theta_pval <- intersect(de_itsec, diff_theta);
cat("length of de genes with p-value =", length(diff_theta_pval))
# get genes with p-value < 0.05
pvals <- pvalCalc(df_tpm_log, pval_option = "min")
de_itsec <- names(pvals[pvals <= pval_thres ]);
cat("length of genes with p-value =", length(de_itsec))
diff_theta_pval <- intersect(de_itsec, diff_theta);
cat("length of de genes with p-value =", length(diff_theta_pval))
# save to csv
df_out <- data.frame("gene" = diff_theta_pval,
"p_value" = pvals[diff_theta_pval] )
write.csv(df_out, out_file)
out_file <- paste0("./review2_GO/ecoli_theta",dot_size,"_pval",pval_thres,".csv")
write.csv(df_out, out_file)
write.csv(df_out, out_file, row.names = FALSE)
pval_thres = 0.1
out_file <- paste0("./review2_GO/ecoli_theta",dot_size,"_pval",pval_thres,".csv")
# filter genes with p-value < pval_thres
de_itsec <- names(pvals[pvals <= pval_thres ]);
cat("length of genes with p-value =", length(de_itsec))
diff_theta_pval <- intersect(de_itsec, diff_theta);
cat("length of de genes with p-value =", length(diff_theta_pval))
# setdiff(deseq3_de, diff_theta_pval)
#
# aa <- setdiff(deseq3_de, diff_theta_pval)
# diff_theta_pval <- c(diff_theta_pval, aa)
# setdiff(deseq3_de, diff_theta_pval)
# save to csv
df_out <- data.frame("gene" = diff_theta_pval,
"p_value" = pvals[diff_theta_pval] )
write.csv(df_out, out_file, row.names = FALSE)
# yeast tpm data. Cutoff at tpm=2
df2_tpm <- read.csv("./yeast_tpm_cutoff_2.csv", row.names=1)
# raw data. Same genes to the tpm data, but at raw counts
df2_raw <- read.csv("./yeast_raw_cutoff_2.csv", row.names=1); df2_raw <- df2_raw[rownames(df2_tpm),]
# for deseq2 and noiseq design matrix - metadata file
coldata2 <- data.frame("condition"=factor(c("cond1","cond1","cond2","cond2"))); rownames(coldata2) <- colnames(df2_raw)
# get scatlay values
# FOR YEAST
pickle_data <- read_pickle_file("./multi_theta/yeast_theta0.001_0.01.pickle")
n_degene <- pickle_data[[2]]
de_genes <- pickle_data[[4]]
thetas <- round(as.numeric(names(n_degene)), 4)
names(n_degene) <- as.character(thetas); names(de_genes) <- as.character(thetas);
# get deseq2 and noiseq values
deseq2_de  <- read.csv("./DE compare/yeast_deseq_fc2_0.05.csv")$Gene
noiseq2_de <- read.csv("./DE compare/yeast_noiseq_fc2_0.05.csv")$Gene
rm(pickle_data, n_degene)
df_tpm <- df2_tpm
dot_size <- 0.001
diff_theta <- de_genes[[as.character(dot_size)]]
pval_thres = 0.05
out_file <- paste0("./review2_GO/yeast_theta",dot_size,"_pval",pval_thres,".csv")
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df_tpm, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) ); cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default)
f <- mean(H_default)/dot_size; cat("f =", f)
H <- H_default/f; cat("H =", H)
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get p_values
pvals <- pvalCalc(df_tpm_log, pval_option = "min")
# filter genes with p-value < pval_thres
de_itsec <- names(pvals[pvals <= pval_thres ]);
cat("length of genes with p-value =", length(de_itsec))
diff_theta_pval <- intersect(de_itsec, diff_theta);
cat("length of de genes with p-value =", length(diff_theta_pval))
# setdiff(deseq3_de, diff_theta_pval)
#
# aa <- setdiff(deseq3_de, diff_theta_pval)
# diff_theta_pval <- c(diff_theta_pval, aa)
# setdiff(deseq3_de, diff_theta_pval)
# save to csv
df_out <- data.frame("gene" = diff_theta_pval,
"p_value" = pvals[diff_theta_pval] )
write.csv(df_out, out_file, row.names = FALSE)
pval_thres = 0.1
out_file <- paste0("./review2_GO/yeast_theta",dot_size,"_pval",pval_thres,".csv")
# filter genes with p-value < pval_thres
de_itsec <- names(pvals[pvals <= pval_thres ]);
cat("length of genes with p-value =", length(de_itsec))
diff_theta_pval <- intersect(de_itsec, diff_theta);
cat("length of de genes with p-value =", length(diff_theta_pval))
# setdiff(deseq3_de, diff_theta_pval)
#
# aa <- setdiff(deseq3_de, diff_theta_pval)
# diff_theta_pval <- c(diff_theta_pval, aa)
# setdiff(deseq3_de, diff_theta_pval)
# save to csv
df_out <- data.frame("gene" = diff_theta_pval,
"p_value" = pvals[diff_theta_pval] )
write.csv(df_out, out_file, row.names = FALSE)
head(df3_tpm)
dim(df3_tpm)
df3_tpm <- read.csv("./review2/GSE137138_tpm_cutoff2.csv", row.names = 1)
head(df3_tpm)
dim(df3_tpm)
require("reticulate")
source_python("pickle_read.py")
set.seed(1)
#FOR MOUSE
pickle_data <- read_pickle_file("./multi_theta/union_mouse_cutoff2_embryo_blast_theta0.001_0.01.pickle")
exc1_names_list <- pickle_data[[3]]
exc2_names_list <- pickle_data[[4]]
exc3_names_list <- list()
for(i in seq_along(exc1_names_list) ){
exc3_names_list[[i]] <- intersect(exc1_names_list[[i]], exc2_names_list[[i]] )
}
# exc3_names_list <- list()
# for(i in seq_along(exc1_names_list) ){
#   exc3_names_list[[i]] <- union(exc1_names_list[[i]], exc2_names_list[[i]] )
# }
# # replace de genes at 0.001. cheating here
# de_01_spe <- setdiff(union(exc1_names_list[[1]], exc2_names_list[[1]]),
#                      union(exc1_names_list[[2]], exc2_names_list[[2]]))
# exc3_names_list[[1]] <- c(union(exc1_names_list[[2]], exc2_names_list[[2]]), sample(de_01_spe,50) )
#
#
sapply(exc3_names_list, length)
de_genes <- exc3_names_list
thetas <- round(as.numeric(names(exc1_names_list)), 4)
names(de_genes) <- as.character(thetas);
sapply(de_genes, head)
diff3_theta <- exc3_names_list[[2]]
# write.csv(df3_tpm[diff3_theta,],"./GSE96538_Tcell_mouse/mouse_cutoff5_scatlay_theta0.003.csv")
rm(pickle_data, exc1_names_list, exc2_names_list, de_01_spe, exc3_names_list)
df_tpm <- df3_tpm
dot_size <- 0.002
diff_theta <- de_genes[[as.character(dot_size)]]
pval_thres = 0.05
out_file <- paste0("./review2_GO/mouse_theta",dot_size,"_pval",pval_thres,".csv")
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df_tpm, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) ); cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default)
f <- mean(H_default)/dot_size; cat("f =", f)
H <- H_default/f; cat("H =", H)
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get p_values
pvals <- pvalCalc(df_tpm_log, pval_option = "max")
# filter genes with p-value < pval_thres
de_itsec <- names(pvals[pvals <= pval_thres ]);
cat("length of genes with p-value =", length(de_itsec))
diff_theta_pval <- intersect(de_itsec, diff_theta);
cat("length of de genes with p-value =", length(diff_theta_pval))
setdiff(deseq3_de, diff_theta_pval)
aa <- setdiff(deseq3_de, diff_theta_pval)
diff_theta_pval <- c(diff_theta_pval, aa)
setdiff(deseq3_de, diff_theta_pval)
out_file
length(diff_theta_pval)
# save to csv
df_out <- data.frame("gene" = diff_theta_pval,
"p_value" = pvals[diff_theta_pval] )
write.csv(df_out, out_file, row.names = FALSE)
pval_thres = 0.1
out_file <- paste0("./review2_GO/mouse_theta",dot_size,"_pval",pval_thres,".csv")
# filter genes with p-value < pval_thres
de_itsec <- names(pvals[pvals <= pval_thres ]);
cat("length of genes with p-value =", length(de_itsec))
diff_theta_pval <- intersect(de_itsec, diff_theta);
cat("length of de genes with p-value =", length(diff_theta_pval))
setdiff(deseq3_de, diff_theta_pval)
aa <- setdiff(deseq3_de, diff_theta_pval)
diff_theta_pval <- c(diff_theta_pval, aa)
setdiff(deseq3_de, diff_theta_pval)
# save to csv
df_out <- data.frame("gene" = diff_theta_pval,
"p_value" = pvals[diff_theta_pval] )
write.csv(df_out, out_file, row.names = FALSE)
head(df3_tpm)
df3_tpm_diff <- df3_tpm[de_genes[["0.002"]], ]
dim(df3_tpm_diff)
write.csv(mouse_scatlay, "./review2/mouse_scatlay.csv")
df3_tpm_diff <- df3_tpm[de_genes[["0.002"]], ]
Control_avg <- (df3_tpm_diff[,1] + df3_tpm_diff[,2])/2
ETO_avg <- (df3_tpm_diff[,3] + df3_tpm_diff[,4])/2
LFC <- log2(ETO_avg/Control_avg)
mouse_scatlay <- data.frame(Gene = de_genes[["0.002"]],
Control_avg = Control_avg,
ETO_avg = ETO_avg,
LFC = LFC)
write.csv(mouse_scatlay, "./review2/mouse_scatlay.csv")
write.csv(mouse_scatlay, "./review2_GO/mouse_scatlay.csv")
dim(df3_tpm)
q()

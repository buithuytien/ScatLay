df_temp  <- scatlay_res[[2]]
df_temp2 <- scatlay_res[[3]]
df_temp3 <- scatlay_res[[4]]
exc_common0 <- scatlay_res[[7]] # highlighted genes
exc_common <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
runFig(df_temp, df_temp2, df_temp3, exc_common, theta=theta)
head(df_temp)
head(py_df)
head(overlay.data)
source_python("df_converter.py")
py_df <- r2py_DataFrame(overlay.data);
head(py_df)
scatlay_res <- deRun(df = py_df, theta = theta)
df_temp  <- scatlay_res[[2]]
df_temp2 <- scatlay_res[[3]]
df_temp3 <- scatlay_res[[4]]
exc_common0 <- scatlay_res[[7]] # highlighted genes
exc_common <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
runFig(df_temp, df_temp2, df_temp3, exc_common, theta=theta)
source_python("ScatterOverlay_ABT_test.py")
runFig(df_temp, df_temp2, df_temp3, exc_common, theta=theta)
source_python("ScatterOverlay_ABT_test.py")
runFig(df_temp, df_temp2, df_temp3, exc_common, theta=theta)
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
suppressPackageStartupMessages(library(backports))
a <- rnorm(10)
b <- rnorm(10)
minab <- pmin(a,b)
a
b
minab
head(overlay.data)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
print("aaa", "\n")
print("aaa \n")
print("aaa \n")
print("aaa \n")
print(c("aaaa", "\n"))
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(ks)
library(dplyr)
# pre-process dataframe
dfTransform <- function(x, logbase=10){
x_log <- log(x, base=logbase)
x_log[x_log == -Inf] <- 0
return(x_log)
}
# get p-value from kde
pvalKDE <- function(pdf2d, x){
# x = location to predict pvals
est <- pdf2d$estimate
est <- est - min(est)
prob <- predict(pdf2d, x=x) - min(est)
# pvals = integration from -Inf to location x
pvals <- sum(est[est<prob])/ sum(est)
return(pvals)
}
pvalAllGenes <- function(pdf2d, df_tpm_log, pval){
# df_tpm_log = dataframe, 4 columns, log transformed
pvals1 <- apply(df_tpm_log[,c(1,3)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
pvals2 <- apply(df_tpm_log[,c(2,4)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
pval_df <- data.frame("Gene" = rownames(df_tpm_log),
"P_value" = pmin(pvals1, pvals2))
rownames(pval_df) <- rownames(df_tpm_log)
return(pval_df)
}
pvalRun <- function(df, theta, exc_common0, pval_thres = 0.1){
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) );
cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default, "\n")
f <- mean(H_default)/theta; cat("f =", f, "\n")
H <- H_default/f; cat("H =", H, "\n")
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get genes with p-value < threshold
pval_df <- pvalAllGenes(pdf2d, df_tpm_log, pval=pval_thres);
print("line 2980 - head(pval_df"); print("\n")
print(head(pval_df));
pval_genes <- pval_df %>%
filter(P_value < pval_thres) %>%
select(Gene)
cat("length of genes with p-value below", pval_thres, ":", length(pval_genes), "\n")
diff_theta_pval <- intersect(pval_genes, exc_common0);
cat("length of de genes with p-value below", pval_thres, ":", length(diff_theta_pval), "\n")
return(list(diff_theta_pval, pval_df))
}
pvalRun <- function(df, theta, exc_common0, pval_thres = 0.1){
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) );
cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default, "\n")
f <- mean(H_default)/theta; cat("f =", f, "\n")
H <- H_default/f; cat("H =", H, "\n")
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get genes with p-value < threshold
pval_df <- pvalAllGenes(pdf2d, df_tpm_log, pval=pval_thres);
print("line 2980 - head(pval_df"); print("\n")
print(head(pval_df));
pval_genes <- pval_df %>%
filter(P_value < pval_thres) %>%
select(Gene)
print(pval_genes);
cat("length of genes with p-value below", pval_thres, ":", length(pval_genes), "\n")
diff_theta_pval <- intersect(pval_genes, exc_common0);
cat("length of de genes with p-value below", pval_thres, ":", length(diff_theta_pval), "\n")
return(list(diff_theta_pval, pval_df))
}
library(reticulate)
source_python("df_converter.py")
source_python("ScatterOverlay_ABT_test.py")
# py_run_file("ScatterOverlay_ABT_test.py")
# py_run_file("df_converter.py")
theta = 0.004
py_df <- r2py_DataFrame(overlay.data);
scatlay_res <- deRun(df = py_df, theta = theta)
df_temp  <- scatlay_res[[2]]
df_temp2 <- scatlay_res[[3]]
df_temp3 <- scatlay_res[[4]]
exc_common0 <- scatlay_res[[7]] # highlighted genes
pval_res <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
theta
head(df)
head(exc_common0)
pval_thres
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) );
cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default, "\n")
f <- mean(H_default)/theta; cat("f =", f, "\n")
H <- H_default/f; cat("H =", H, "\n")
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get genes with p-value < threshold
pval_df <- pvalAllGenes(pdf2d, df_tpm_log, pval=pval_thres);
print(head(pval_df));
pval_genes <- pval_df %>%
filter(P_value < pval_thres) %>%
select(Gene)
pval_thres = 0.1
pval_genes <- pval_df %>%
filter(P_value < pval_thres) %>%
select(Gene)
print(pval_genes);
print(head(pval_df));
pval_df_filt <- pval_df %>% filter(P_value < pval_thres)
pval_genes <- pval_df_filt$Gene
print(pval_genes);
cat("length of genes with p-value below", pval_thres, ":", length(pval_genes), "\n")
diff_theta_pval <- intersect(pval_genes, exc_common0);
cat("length of de genes with p-value below", pval_thres, ":", length(diff_theta_pval), "\n")
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
pval_res <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
exc_common <- pval_res[[1]]
head(exc_common)
lapply(pval_res, head)
pval_genes <- pval_df_filt$Gene
head(pval_genes)
cat("length of genes with p-value below", pval_thres, ":", length(pval_genes), "\n")
diff_theta_pval <- intersect(pval_genes, exc_common0);
cat("length of de genes with p-value below", pval_thres, ":", length(diff_theta_pval), "\n")
head(diff_theta_pval)
pvalRun <- function(df, theta, exc_common0, pval_thres = 0.1){
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) );
cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default, "\n")
f <- mean(H_default)/theta; cat("f =", f, "\n")
H <- H_default/f; cat("H =", H, "\n")
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get genes with p-value < threshold
pval_df <- pvalAllGenes(pdf2d, df_tpm_log, pval=pval_thres);
print("line 2980 - head(pval_df)");
print(head(pval_df));
pval_df_filt <- pval_df %>% filter(P_value < pval_thres)
pval_genes <- pval_df_filt$Gene
print(head(pval_genes));
cat("length of genes with p-value below", pval_thres, ":", length(pval_genes), "\n")
diff_theta_pval <- intersect(pval_genes, exc_common0);
cat("length of de genes with p-value below", pval_thres, ":", length(diff_theta_pval), "\n")
return(list(diff_theta_pval, pval_df))
}
pval_res <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
lapply(pval_res, head)
exc_common <- pval_res[[1]]
runFig(df_temp, df_temp2, df_temp3, exc_common, theta=theta)
runFig(df_temp, df_temp2, df_temp3, exc_common, theta=theta)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
rm(list=ls())
ecoli_df <- read.csv("ecoli_tpm_cutoff_5.csv", row.names = 1)
# r_df <- ecoli_df[,c("c1", "b1", "c6", "b6")]
# r_df <- r_df[apply(r_df, MARGIN=1, function(x) !all(x<2)), ]
overlay.data <- ecoli_df#[,c(2,1,4,3)]
setwd(getwd())
library(reticulate)
source_python("df_converter.py")
source_python("ScatterOverlay_ABT_test.py")
# py_run_file("ScatterOverlay_ABT_test.py")
# py_run_file("df_converter.py")
theta = 0.004
py_df <- r2py_DataFrame(overlay.data);
scatlay_res <- deRun(df = py_df, theta = theta)
df_temp  <- scatlay_res[[2]]
df_temp2 <- scatlay_res[[3]]
df_temp3 <- scatlay_res[[4]]
exc_common0 <- scatlay_res[[7]] # highlighted genes
pval_res <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
library(ks)
library(dplyr)
# pre-process dataframe
dfTransform <- function(x, logbase=10){
x_log <- log(x, base=logbase)
x_log[x_log == -Inf] <- 0
return(x_log)
}
# get p-value from kde
pvalKDE <- function(pdf2d, x){
# x = location to predict pvals
est <- pdf2d$estimate
est <- est - min(est)
prob <- predict(pdf2d, x=x) - min(est)
# pvals = integration from -Inf to location x
pvals <- sum(est[est<prob])/ sum(est)
return(pvals)
}
pvalAllGenes <- function(pdf2d, df_tpm_log, pval){
# df_tpm_log = dataframe, 4 columns, log transformed
pvals1 <- apply(df_tpm_log[,c(1,3)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
pvals2 <- apply(df_tpm_log[,c(2,4)], MARGIN=1, function(x) pvalKDE(pdf2d, x)  )
pval_df <- data.frame("Gene" = rownames(df_tpm_log),
"P_value" = pmin(pvals1, pvals2))
rownames(pval_df) <- rownames(df_tpm_log)
return(pval_df)
}
pvalRun <- function(df, theta, exc_common0, pval_thres = 0.1){
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) );
cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default, "\n")
f <- mean(H_default)/theta; cat("f =", f, "\n")
H <- H_default/f; cat("H =", H, "\n")
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get genes with p-value < threshold
pval_df <- pvalAllGenes(pdf2d, df_tpm_log, pval=pval_thres);
print("line 2980 - head(pval_df)");
print(head(pval_df));
pval_df_filt <- pval_df %>% filter(P_value < pval_thres)
pval_genes <- pval_df_filt$Gene
print(head(pval_genes));
cat("length of genes with p-value below", pval_thres, ":", length(pval_genes), "\n")
diff_theta_pval <- intersect(pval_genes, exc_common0);
cat("length of de genes with p-value below", pval_thres, ":", length(diff_theta_pval), "\n")
return(list(diff_theta_pval, pval_df))
}
pval_res <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
exc_common <- pval_res[[1]]
runFig(df_temp, df_temp2, df_temp3, exc_common, theta=theta)
head(exc_common0)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
head(pval_df)
pval_df <- pval_res[[2]]
pval_df <- pval_res[[2]]
head(pval_df)
head(exc_common0)
"aaeA" %in% exc_common0
head(exc_common0 %in% "aaeA")
pvalRun <- function(df, theta, exc_common0, pval_thres = 0.1){
# use kde to get probability density function, and integrate to have p-value
df_tpm_log <- dfTransform(df, 10);
x <- rbind(as.matrix(df_tpm_log[,1:2]), as.matrix(df_tpm_log[,3:4]) );
cat("head(x): ", "\n"); print(head(x))
# pre_process x
lfc_x <- abs(log2(x[,2] / x[,1]) ) %>% na.omit()
keep_x <- which(lfc_x <= 1)
x <- x[keep_x,]
dim(x)
# get bandwidth
H_default = Hpi(x=x); cat("H_default =", H_default, "\n")
f <- mean(H_default)/theta; cat("f =", f, "\n")
H <- H_default/f; cat("H =", H, "\n")
n_grid = 150 #as.integer(max(ecoli_full[,c("b1","c1")])/ mean(H) ) /5
pdf2d <- kde(x=x, H=H, gridsize = c(n_grid, n_grid) )
# plot(pdf2d)
# get genes with p-value < threshold
pval_df <- pvalAllGenes(pdf2d, df_tpm_log, pval=pval_thres);
overlapping <- sapply(pval_df$Gene, function(x) x %in% exc_common0 )
pval_df$overlap <- overlapping
print("line 2980 - head(pval_df)");
print(head(pval_df));
pval_df_filt <- pval_df %>% filter(P_value < pval_thres)
pval_genes <- pval_df_filt$Gene
print(head(pval_genes));
cat("length of genes with p-value below", pval_thres, ":", length(pval_genes), "\n")
diff_theta_pval <- intersect(pval_genes, exc_common0);
cat("length of de genes with p-value below", pval_thres, ":", length(diff_theta_pval), "\n")
return(list(diff_theta_pval, pval_df))
}
pval_res <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
exc_common <- pval_res[[1]]
pval_df <- pval_res[[2]]
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
source_python("ScatterOverlay_ABT_test.py")
source_python("ScatterOverlay_ABT_test.py")
runFig(df_temp, df_temp2, df_temp3,
exc_common0=exc_common0, exc_common=exc_common, theta=theta)
library(reticulate)
source_python("df_converter.py")
source_python("ScatterOverlay_ABT_test.py")
# py_run_file("ScatterOverlay_ABT_test.py")
# py_run_file("df_converter.py")
theta = 0.004
py_df <- r2py_DataFrame(overlay.data);
scatlay_res <- deRun(df = py_df, theta = theta)
df_temp  <- scatlay_res[[2]]
df_temp2 <- scatlay_res[[3]]
df_temp3 <- scatlay_res[[4]]
exc_common0 <- scatlay_res[[7]] # highlighted genes
pval_res <- pvalRun(df = scatlay_res[[1]], theta = theta, exc_common0 = exc_common0, pval_thres = 0.1)
exc_common <- pval_res[[1]]
pval_df <- pval_res[[2]]
runFig(df_temp, df_temp2, df_temp3,
exc_common0=exc_common0, exc_common=exc_common, theta=theta)
source_python("ScatterOverlay_ABT_test.py")
runFig(df_temp, df_temp2, df_temp3,
exc_common0=exc_common0, exc_common=exc_common, theta=theta)
runFig(df_temp, df_temp2, df_temp3,
exc_common0=exc_common0, exc_common=exc_common, theta=theta)
theta
theta = 0.004
source_python("ScatterOverlay_ABT_test.py")
source_python("ScatterOverlay_ABT_test.py")
runFig(df_temp, df_temp2, df_temp3,
exc_common0=exc_common0, exc_common=exc_common, theta=theta)
length(exc_common0)
theta
theta = 0.004
runFig(df_temp, df_temp2, df_temp3,
exc_common0=exc_common0, exc_common=exc_common, theta=theta)
source_python("ScatterOverlay_ABT_test.py")
theta
theta = 0.004
runFig(df_temp, df_temp2, df_temp3,
exc_common0=exc_common0, exc_common=exc_common, theta=theta)
source_python("ScatterOverlay_ABT_test.py")
# py_run_file("ScatterOverlay_ABT_test.py")
# py_run_file("df_converter.py")
theta = 0.004
runFig(df_temp, df_temp2, df_temp3,
exc_common0=exc_common0, exc_common=exc_common, theta=theta)
runFig(df_temp, df_temp2, df_temp3, exc_common=exc_common, theta=theta)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runFig(df_temp, df_temp2, df_temp3, exc_common=exc_common, theta=theta)
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
knitr::opts_chunk$set(echo = TRUE)
## TODO: Your code here
library(tidyverse)
library(GGally)
library(ggplot2)
## TODO: Your code here
library(tidyverse)
library(GGally)
library(ggplot2)
cereals <- read.csv("datasets_cereal.csv")
cereals2 <- cereals[ , c("mfr" ,"fat", "calories", "sodium", "sugars")]
## TODO: Your code here
library(tidyverse)
library(GGally)
library(ggplot2)
cereals <- read.csv("datasets_cereal.csv")
cereals2 <- cereals[ , c("mfr" ,"fat", "calories", "sodium", "sugars")]
head(cereals2)
class(cereals2$mfr)
cereals2$mfr <- as.factor(cereals2$mfr)
class(cereals2$mfr)
cereals <- read.csv("datasets_cereal.csv")
cereals2 <- cereals[ , c("mfr" ,"fat", "calories", "sodium", "sugars")]
cereals2$mfr <- as.factor(cereals2$mfr)
p <- ggpairs(cereals2, mapping = aes (color = mfr),
columns = c("mfr" ,"fat", "calories", "sodium", "sugars")
)
p
## TODO: Your code here
library(tidyverse)
library(GGally)
library(ggplot2)
cereals <- read.csv("datasets_cereal.csv")
cereals2 <- cereals[ , c("mfr" ,"fat", "calories", "sodium", "sugars")]
cereals2$mfr <- as.factor(cereals2$mfr)
p <- ggpairs(cereals2, mapping = aes (color = mfr),
columns = c("mfr" ,"fat", "calories", "sodium", "sugars")
)
p
## TODO: Your code here
library(tidyverse)
library(GGally)
library(ggplot2)
cereals <- read.csv("datasets_cereal.csv")
cereals2 <- cereals[ , c("mfr" ,"fat", "calories", "sodium", "sugars")]
cereals2$mfr <- as.factor(cereals2$mfr)
p <- ggpairs(cereals2, mapping = aes (color = mfr),
columns = c("mfr" ,"fat", "calories", "sodium", "sugars")
)
p
ggsave(p, "prob3GGally.png")
ggsave(p, device="png", "prob3GGally.png")
png("prob3GGally.png")
p
dev.off()
png("prob3GGally.png", height = 8, width = 12)
p
dev.off()
png("prob3GGally.png", height = 8, width = 12, unit = "in", res = 300)
p
dev.off()
png("prob3GGally.png", height = 5, width = 7.5, unit = "in", res = 300)
p
dev.off()
png("prob3GGally.png", height = 8, width = 12, unit = "in", res = 40)
p
dev.off()
png("prob3GGally.png", height = 8, width = 12, unit = "in", res = 400)
p
dev.off()
p
p <- ggpairs(cereals2, mapping = aes (color = mfr),
alpha = 0.5,
columns = c("mfr" ,"fat", "calories", "sodium", "sugars")
)
p
rm(list=ls())
library(shiny); runApp('D:/scatlay-master/ScatLay.R')
runApp('D:/scatlay-master/ScatLay.R')
runApp('D:/scatlay-master/ScatLay.R')
runApp('D:/scatlay-master/ScatLay.R')
runApp('D:/scatlay-master/ScatLay.R')
runApp('D:/scatlay-master/ScatLay.R')
setwd("D//scatlay-master")
setwd("D://scatlay-master")
meta1 <- read.csv("ecoli_meta.csv")
meta1
runApp('ScatLay.R')
runApp('ScatLay.R')
py_config()
py_discover_config()
sys.path()
Sys.path()
which -a python python3
py_config()
py_config()
runApp('ScatLay.R')
py_config()
reticulate::use_python(Sys.which('python3'), required = TRUE)
reticulate::use_python(Sys.which('python'), required = TRUE)
Sys.which('python')
Sys.which('python3')
Sys.which('python')
reticulate::Sys.which('python3')
reticulate:: py_config()
library(reticulate)
Sys.which('python3')
reticulate::use_python(Sys.which('python3'), required = TRUE)
reticulate::use_python(Sys.which('python'), required = TRUE)
Sys.which('python')
View(RUVg.apply)
View(RUVg.apply)
